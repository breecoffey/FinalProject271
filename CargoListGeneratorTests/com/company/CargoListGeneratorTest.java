package com.company;

import org.junit.Test;

import java.util.HashSet;

import static org.junit.Assert.*;

/**
 * JUnit test harness of CargoListGenerator methods
 * Tests methods calculateItemsLeftBehind(), fillValueMDArray(), calculateMaxValue(), generateList(), findSelectedItems()
 * @author Juliana Reider and Bree Coffey
 */
public class CargoListGeneratorTest {

    /**
     * Test if method calculates the proper items to be left out of the optimal solution
     * @result all items from actualItems are subtracted from potentialList. remaining items are stored in itemsLeftBehind
     * @throws Exception if assertEquals fails
     */

    @Test
    public void calculateItemsLeftBehind() throws Exception {
        CargoItem firstItem = new CargoItem(1, "firstItem", 1);
        CargoItem secondItem = new CargoItem(3, "secondItem", 4);
        CargoItem thirdItem = new CargoItem(4, "thirdItem", 5);
        CargoItem fourthItem = new CargoItem(5, "fourthItem", 7);
        CargoItemList itemList = new CargoItemList();

        itemList.addCargoItemToList(firstItem);
        itemList.addCargoItemToList(secondItem);
        itemList.addCargoItemToList(thirdItem);
        itemList.addCargoItemToList(fourthItem);
        CargoListGenerator testGen4 = new CargoListGenerator();
        testGen4.setPotentialItems(itemList);

        CargoItemList tempActualItems = new CargoItemList();
        tempActualItems.addCargoItemToList(firstItem);
        tempActualItems.addCargoItemToList(secondItem);
        testGen4.setActualItems(tempActualItems);

        testGen4.calculateItemsLeftBehind();

        HashSet<CargoItem> actualItemsLeftBehindSet = new HashSet<>();
        HashSet<CargoItem> expectedItemsLeftBehindSet = new HashSet<>();

        actualItemsLeftBehindSet.addAll(testGen4.getItemsLeftBehind().getItemArrayList());

        expectedItemsLeftBehindSet.add(thirdItem);
        expectedItemsLeftBehindSet.add(fourthItem);

        assertEquals(expectedItemsLeftBehindSet, actualItemsLeftBehindSet);
    }

    /**
     * Test if method fills the two-dimensional array with the correct values.
     * Method call generates 2D array and then converted to a String, assertEquals compares the expected 2D array with that generated by method call
     * @result the expected 2D array equals the one generated by the method call
     * @throws Exception if assertEquals fails
     */
    @Test
    public void fillValueMDArray() throws Exception{
        //method to generally test the fillValueMDArray function
        CargoItem firstItem = new CargoItem(1, "firstItem", 1);
        CargoItem secondItem = new CargoItem(3, "secondItem", 4);
        CargoItem thirdItem = new CargoItem(4, "thirdItem", 5);
        CargoItem fourthItem = new CargoItem(5, "fourthItem", 7);
        CargoItemList itemList = new CargoItemList();
        CargoListGenerator testGenerator2 = new CargoListGenerator(itemList);
        int maxWeight = 7;
        itemList.addCargoItemToList(firstItem);
        itemList.addCargoItemToList(secondItem);
        itemList.addCargoItemToList(thirdItem);
        itemList.addCargoItemToList(fourthItem);
        int numItems = itemList.getSize();
        testGenerator2.fillValueMDArray(maxWeight);

        String stringTestOfMDArray = "";
        int[][] mdArray = testGenerator2.getPossibleValueArray();
        for (int indexOfAnItem = 0; indexOfAnItem <= numItems; indexOfAnItem++) {//considering one by one all items
            for (int incrementWeight = 0; incrementWeight <= maxWeight; incrementWeight++) {
                stringTestOfMDArray += mdArray[indexOfAnItem][incrementWeight] + ",";
            }
            stringTestOfMDArray += "\n";
        }
        assertEquals("0,0,0,0,0,0,0,0,\n0,1,1,1,1,1,1,1,\n0,1,1,4,5,5,5,5,\n0,1,1,4,5,6,6,9,\n0,1,1,4,5,7,8,9,\n", stringTestOfMDArray);
    }

    /**
     * Test if generateList calls all subsequent helper methods and generates the proper result of which items to bring and which to leave behind.
     * @result the list of actual items and items left behind match the expected items
     * @throws Exception if assertEquals fails
     */

    @Test
    public void generateList() throws Exception {
        CargoItemList itemList = new CargoItemList();
        CargoListGenerator testGen = new CargoListGenerator(itemList);

        itemList.addCargoItemToList(new CargoItem(1, "firstItem", 1));
        itemList.addCargoItemToList(new CargoItem(3, "secondItem", 4));
        itemList.addCargoItemToList(new CargoItem(4, "thirdItem", 5));
        itemList.addCargoItemToList(new CargoItem(5, "fourthItem", 7));

        String expectedString0 = "Bring these items: \n" +
                "\tItem: thirdItem, Weight: 4, Value: $5\n" +
                "\tItem: secondItem, Weight: 3, Value: $4\n" +
                "Total value of these items is: $9\n" +
                "Leave behind these items: \n" +
                "\tItem: firstItem, Weight: 1, Value: $1\n" +
                "\tItem: fourthItem, Weight: 5, Value: $7\n";
        String expectedString1 = "Bring these items: \n" +
                "\tItem: thirdItem, Weight: 4, Value: $5\n" +
                "\tItem: secondItem, Weight: 3, Value: $4\n" +
                "Total value of these items is: $9\n" +
                "Leave behind these items: \n" +
                "\tItem: fourthItem, Weight: 5, Value: $7\n" +
                "\tItem: firstItem, Weight: 1, Value: $1\n";
        String actualString = testGen.generateList(itemList, 7);

        assertTrue(actualString.equals(expectedString0) || actualString.equals(expectedString1));

        CargoItemList anotherItemList = new CargoItemList();
        CargoListGenerator testGenerator2 = new CargoListGenerator(anotherItemList);

        anotherItemList.addCargoItemToList(new CargoItem(10, "aItem", 60));
        anotherItemList.addCargoItemToList(new CargoItem(20, "bItem", 100));
        anotherItemList.addCargoItemToList(new CargoItem(30, "cItem", 120));

        expectedString0 = "Bring these items: \n" +
                "\tItem: cItem, Weight: 30, Value: $120\n" +
                "\tItem: bItem, Weight: 20, Value: $100\n" +
                "Total value of these items is: $220\n" +
                "Leave behind these items: \n" +
                "\tItem: aItem, Weight: 10, Value: $60\n";
        assertEquals(expectedString0, testGenerator2.generateList(anotherItemList, 50));
    }

    /**
     * Tests if calculateMaxValue method generates the expected maximum value.
     * Also tests if max value is 0 if no items are taken or for maximum value if all items are taken.
     * @result the maximum value in the bottom right corner of the 2D array is the expected maximum value for the set of cargo items
     * @throws Exception if assertEquals fails
     */

    @Test
    public void calculateMaxValue() throws Exception {

        CargoItemList itemList = new CargoItemList();
        CargoListGenerator testGenerator2 = new CargoListGenerator(itemList);
        itemList.addCargoItemToList(new CargoItem(1, "firstItem", 1));
        itemList.addCargoItemToList(new CargoItem(3, "secondItem", 4));
        itemList.addCargoItemToList(new CargoItem(4, "thirdItem", 5));
        itemList.addCargoItemToList(new CargoItem(5, "fourthItem", 7));
        assertEquals(9, testGenerator2.calculateMaxValue(7)); //size would be four, second parameter

        CargoItemList anotherItemList = new CargoItemList();
        CargoListGenerator testGenerator3 = new CargoListGenerator(anotherItemList);
        CargoItem aItem = new CargoItem(10, "aItem", 60);
        CargoItem bItem = new CargoItem(20, "bItem", 100);
        CargoItem cItem = new CargoItem(30, "cItem", 120);
        anotherItemList.addCargoItemToList(aItem);
        anotherItemList.addCargoItemToList(bItem);
        anotherItemList.addCargoItemToList(cItem);

        assertEquals(220, testGenerator3.calculateMaxValue(50)); // size would be three second param

        CargoListGenerator testG = new CargoListGenerator(anotherItemList);
        assertEquals(280, testG.calculateMaxValue(1000)); //tests for if all items can fit, if the value will be calculated correctly
        assertEquals(0, testG.calculateMaxValue(0)); //test to see if the max weight is zero, if no value can be stored on the plane

    }

    /**
     * Tests if findSelectedItems method generates the correct expected items for the optimal solution.
     * Tests if the sum of all values of the selected items matches the last value in the MD Array
     * @result The selected items match the correct selected items for the optimal solution
     * @throws Exception if assertEquals fails
     */
    @Test
    public void findSelectedItems() throws Exception {
        CargoItem firstItem = new CargoItem(1, "firstItem", 1);
        CargoItem secondItem = new CargoItem(3, "secondItem", 4);
        CargoItem thirdItem = new CargoItem(4, "thirdItem", 5);
        CargoItem fourthItem = new CargoItem(5, "fourthItem", 7);
        CargoItemList itemList = new CargoItemList();
        CargoListGenerator testGen3 = new CargoListGenerator(itemList);
        itemList.addCargoItemToList(firstItem);
        itemList.addCargoItemToList(secondItem);
        itemList.addCargoItemToList(thirdItem);
        itemList.addCargoItemToList(fourthItem);
        //CargoListGenerator testGen3 = new CargoListGenerator(itemList);
        testGen3.calculateMaxValue(7);
        //findSelectedItems(5, 8);
        //assertEquals(9, testGen3.findSelectedItems(5, 8));
        //todo

        //I think another additional way to test this method further is to
        // check that the sum of the values of all the selected items
        // have a combined value equal last value in the table

    }

    /**
     * Tests to see if the proper exception is thrown when trying to add items of 0 weight and 0 value to list
     * @throws InvalidInputException
     */
    @Test (expected = InvalidInputException.class)
    public void testsInvalidInputExcetption () throws InvalidInputException{
        CargoItemList itemList = new CargoItemList();
        itemList.addCargoItemToList(new CargoItem(0, "firstItem", 1));
        itemList.addCargoItemToList(new CargoItem(4, "thirdItem", 0));
    }

}